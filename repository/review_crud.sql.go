// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: review_crud.sql

package repository

import (
	"context"
)

const deleteReview = `-- name: DeleteReview :exec

DELETE FROM review WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const insertImage = `-- name: InsertImage :exec

INSERT INTO image ("review_id", "image_url") VALUES ($1, $2)
`

type InsertImageParams struct {
	ReviewID int64
	ImageUrl string
}

func (q *Queries) InsertImage(ctx context.Context, arg InsertImageParams) error {
	_, err := q.db.ExecContext(ctx, insertImage, arg.ReviewID, arg.ImageUrl)
	return err
}

const insertReview = `-- name: InsertReview :one

INSERT INTO
    review (
        "user_id",
        "product_id",
        "num_star"
    )
VALUES ($1, $2, $3) RETURNING "id"
`

type InsertReviewParams struct {
	UserID    int64
	ProductID int64
	NumStar   int32
}

func (q *Queries) InsertReview(ctx context.Context, arg InsertReviewParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertReview, arg.UserID, arg.ProductID, arg.NumStar)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const selectReviewByProductID = `-- name: SelectReviewByProductID :many

SELECT
    review.id,
    "user_id",
    "product_id",
    "num_star",
    "image_url"
FROM review
    INNER JOIN image ON review.id = image.review_id
WHERE review.id = $1
`

type SelectReviewByProductIDRow struct {
	ID        int64
	UserID    int64
	ProductID int64
	NumStar   int32
	ImageUrl  string
}

func (q *Queries) SelectReviewByProductID(ctx context.Context, id int64) ([]SelectReviewByProductIDRow, error) {
	rows, err := q.db.QueryContext(ctx, selectReviewByProductID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectReviewByProductIDRow
	for rows.Next() {
		var i SelectReviewByProductIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.NumStar,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
